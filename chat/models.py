from django.db import models
from accounts.models import User
from django.db.models import Q

class ChatGroup(models.Model):
    """
    a chat group is uniquily created for two users, the group_name will be generated by 
    combaning the usernames of the two users. 
    """
    group_name = models.CharField(max_length=200, verbose_name="chat group name", unique=True)
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.group_name

    
        


class ChatMessage(models.Model):
    chat_group = models.ForeignKey( ChatGroup, on_delete = models.CASCADE)
    sender = models.ForeignKey(User, on_delete= models.CASCADE)
    read = models.BooleanField(default=False)
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)


    def __str__(self):
        return f'{self.sender.username} : {self.content}'

    def participants(self):
        participants_list = self.chat_group.group_name.split('_') #returns the 2 usernames 
        participants = {'sender':sender}
        for p_username in participants_list:
            if p_username != sender.username:
                participants['receiver'] = User.objects.get(username=p_username)
        return participants 
    
    def get_recieved_messages(user):
        return ChatMessage.objects.filter( Q(chat_group__group_name__contains = user.username) & ~Q(sender = user ) )

    def get_all_messages(user):
        return ChatMessage.objects.filter(chat_group__group_name__contains = user.username )
    

    def unread_messages(user):
        return ChatMessage.objects.filter( Q(chat_group__group_name__contains = user.username) & ~Q(sender = user ) & Q(read = False) )

    #no of total unread message
    def count_unread_message( user):
        return ChatMessage.objects.filter( Q(chat_group__group_name__contains = user.username) & ~Q(sender = user ) & Q(read = False) ).count()

    #no of unread messages from a specific sender
    def count_unread_messages_from_sender(sender, user):
        q = Q( Q(chat_group__group_name__contains = sender.username) &  Q(chat_group__group_name__contains = user.username)& Q( read = False) & Q(sender = sender))
        return  ChatMessage.objects.filter(q).count()

    #returns latest 10 chat messages for sender and receiver
    def last_10_messages(chat_group):
        return ChatMessage.objects.filter(chat_group__group_name = chat_group)[:10]


def get_grouped_message( list_of_messages):
    sender_names = []
    grouped = []
    for latest_sender_message in list_of_messages:
        if not latest_sender_message.sender.username in sender_names:
            print(" from get grouped message in chat models new sender message", latest_sender_message.sender.username, " ", latest_sender_message.id)
            new = {
                'message':latest_sender_message,
                'count': list_of_messages.filter( sender__username = latest_sender_message.sender.username).count()
            }
            grouped.append(new)
            sender_names.append(latest_sender_message.sender.username)
    
    return grouped


#returns the latest message from a sender and count of unread messages from a sender
def get_unread_grouped_messages(user):
    q = Q( Q(chat_group__group_name__contains = user.username) & Q( read = False) & ~Q(sender = user))
    unread_messages = ChatMessage.objects.filter(q).order_by('-timestamp') 
    return get_grouped_message(unread_messages)


#returns the latest message from a sender and count of total messages from a sender
def get_recieved_grouped_messages(user):
    
    q = Q( Q(chat_group__group_name__contains = user.username)  & ~Q(sender = user))
    recieved_messages = ChatMessage.objects.filter(q).order_by('-timestamp')
    return get_grouped_message(recieved_messages)
    
    

    
